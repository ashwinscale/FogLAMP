#!/bin/bash

# Global constants declaration
declare RESULT_DIR
declare TEST_NAME

# Environment in which the tests suite is executed {ucore|userver}
export EXECUTION_ENV=ucore

# Gets the system arch and evaluates the names to apply
ARCH_OS=`arch`
if [[ "${ARCH_OS}" == "armv7l" ]]; then

    ARCH_DIR_NAME="armhf"
    ARCH_FILE_NAME="armhf"
fi

if [[ "${ARCH_OS}" == "x86_64" ]]; then

    ARCH_DIR_NAME="x86_64"
    ARCH_FILE_NAME="amd64"
fi

# FogLAMP server references
export FOGLAMP_SERVER=localhost
export FOGLAMP_HTTPPort=8081
export FOGLAMP_HTTPsPort=1995
export FOGLAMP_AVAHI_STRING='_foglamp-user._tcp'

# Temporary directory for the operations related to the snaps
export TMP_DIRECTORY=/home/foglamp/tmp
export SNAPS_DIRECTORY=${TMP_DIRECTORY}/snaps/${ARCH_DIR_NAME}
export BACKUPS_DIR=/home/foglamp/snap/foglamp/common/backup

# FogLAMP package references
export FOGLAMP_NAME=foglamp
export FOGLAMP_SNAP_VERSION=x.x.x
export FOGLAMP_SNAP_UPDATE_VERSION=x.x.x
export FOGLAMP_SNAP=foglamp_${FOGLAMP_SNAP_VERSION}_${ARCH_FILE_NAME}.snap
export FOGLAMP_SNAP_UPDATE=foglamp_${FOGLAMP_SNAP_UPDATE_VERSION}_${ARCH_FILE_NAME}.snap
export FOGLAMP_SNAP_PATH=https://s3.amazonaws.com/foglamp/snaps/${ARCH_DIR_NAME}/

# Configurations related to FogLAMP
export SENDING_PROCESS_DATA=SEND_PR_1
export SENDING_PROCESS_STAT=SEND_PR_2
# Identifies sensors and measurements types
export OMF_TYPE_ID=0001
export OMF_PRODUCER_TOKEN=SOW_ucore_${OMF_TYPE_ID}

# PI server references
export PI_SERVER=pi-server
export PI_SERVER_PORT=5460
export PI_SERVER_UID=pi-server-uid
export PI_SERVER_PWD=pi-server-pwd
export PI_SERVER_DATABASE=pi-server-db

# Define the asset information
export ASSET_CODE="SOW_fogbench_test"

# Maximum numbers of retries to attempt an operation (usually corresponds to 600 seconds)
export RETRY_COUNT=600

#
# Configurations related to the execution environment
#
if [[ "${EXECUTION_ENV}" == "userver" ]]; then

    # Commands to be used
    export CMD_WGET=" wget "
    export CMD_CURL=" curl "
    export CMD_JQ=" jq "
    export CMD_AVBROWSE="avahi-browse"

    # Retrieves the schedule ID of the OMF plugin
    export SCHEDULE_ID_OMF_PLUGIN=`curl -s -X GET http://${FOGLAMP_SERVER}:${FOGLAMP_HTTPPort}/foglamp/schedule | jq --raw-output '.schedules | .[] | select(.name=="OMF to PI north") | .id'`

elif [[ "${EXECUTION_ENV}" == "ucore" ]]; then

    # Commands to be used
    export CMD_WGET=" sudo classic wget "
    export CMD_CURL=" sudo classic curl "
    export CMD_JQ=" sudo classic jq "
    export CMD_AVBROWSE=" avahi-client.browse "

    # Retrieves the schedule ID of the OMF plugin
    sudo classic << EOF                                                                                                     >> ${RESULT_DIR}/$TEST_NAME.1.temp 2>> ${RESULT_DIR}/$TEST_NAME.2.temp
    curl -s -X GET http://${FOGLAMP_SERVER}:${FOGLAMP_HTTPPort}/foglamp/schedule | jq --raw-output '.schedules | .[] | select(.name=="OMF to PI north") | .id' > ${RESULT_DIR}/suite_cfg.temp
    logout
EOF
    if [[ -f "${RESULT_DIR}/suite_cfg.temp" ]]; then
        export SCHEDULE_ID_OMF_PLUGIN=`cat ${RESULT_DIR}/suite_cfg.temp`
    else
        export SCHEDULE_ID_OMF_PLUGIN=none
    fi

fi
